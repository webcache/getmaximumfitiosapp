# Fastfile for iOS App Store Deployment (API-key only)

default_platform(:ios)

# ---- Helpers ----
def asc_api_key
  app_store_connect_api_key(
    key_id:     ENV['ASC_KEY_ID']     || ENV['APP_STORE_CONNECT_API_KEY_ID'],
    issuer_id:  ENV['ASC_ISSUER_ID']  || ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
    key_filepath: ENV['ASC_KEY_PATH'] || ENV['APP_STORE_CONNECT_API_KEY_PATH']
  )
end

def run_match(readonly: true)
  match(
    type: "appstore",
    readonly: readonly,
    app_identifier: ["com.getmaximumfreedomandfitness.getmaximumfitiosapp"],
    team_id: ENV['APPLE_TEAM_ID'],
    keychain_name: ENV['MATCH_KEYCHAIN_NAME'] || "ci-keys.keychain",
    keychain_password: ENV['CI_KEYCHAIN_PWD'],
    storage_mode: "git",
    git_url: ENV['MATCH_GIT_URL'],
    git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
    api_key: asc_api_key
  )
end

platform :ios do
  desc "Sync certificates and provisioning profiles (readonly)"
  lane :sync_certificates do
    run_match(readonly: true)
  end

  desc "Build the app for App Store"
  lane :build_app_store do
    # Try readonly first, if no certs exist, generate them
    begin
      run_match(readonly: true)
    rescue => e
      if e.message.include?("No code signing identity found")
        UI.important("No certificates found, generating new ones...")
        run_match(readonly: false)
      else
        raise e
      end
    end

    # Unique build number (timestamp)
    increment_build_number(build_number: Time.now.to_i.to_s)

    gym(
      scheme: "GetMaximumFit",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.getmaximumfreedomandfitness.getmaximumfitiosapp" =>
            "match AppStore com.getmaximumfreedomandfitness.getmaximumfitiosapp"
        }
      },
      output_directory: "./",
      output_name: "GetMaximumFit.ipa"
    )
  end

  desc "Upload to TestFlight"
  lane :upload_testflight do
    build_app_store
    upload_to_testflight(
      api_key: asc_api_key,
      skip_waiting_for_build_processing: true,
      skip_submission: true
    )
    slack(message: "🚀 New build uploaded to TestFlight!", success: true) if ENV["SLACK_URL"]
  end

  desc "Build and upload beta to TestFlight"
  lane :beta do
    # Try readonly first, if no certs exist, generate them
    begin
      run_match(readonly: true)
    rescue => e
      if e.message.include?("No code signing identity found")
        UI.important("No certificates found, generating new ones...")
        run_match(readonly: false)
      else
        raise e
      end
    end

    increment_build_number(build_number: Time.now.to_i.to_s)

    gym(
      scheme: "GetMaximumFit",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.getmaximumfreedomandfitness.getmaximumfitiosapp" =>
            "match AppStore com.getmaximumfreedomandfitness.getmaximumfitiosapp"
        }
      },
      output_directory: "./",
      output_name: "GetMaximumFit.ipa"
    )

    upload_to_testflight(
      api_key: asc_api_key,
      skip_waiting_for_build_processing: true,
      skip_submission: true
    )

    UI.success("🎉 Beta build uploaded to TestFlight!")
  end

  desc "Deploy to App Store (via TestFlight upload)"
  lane :deploy_app_store do
    build_app_store
    upload_to_testflight(
      api_key: asc_api_key,
      skip_waiting_for_build_processing: true,
      skip_submission: true
    )
    UI.success("🎉 Production build uploaded to TestFlight!")
  end

  desc "Setup CI keychain + pull certs"
  lane :setup_ci do
    create_keychain(
      name: ENV['MATCH_KEYCHAIN_NAME'] || "ci-keys.keychain",
      password: ENV['CI_KEYCHAIN_PWD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    run_match(readonly: true)
  end

  error do |lane, exception|
    slack(message: "❌ Build failed in lane #{lane}: #{exception.message}", success: false) if ENV["SLACK_URL"]
  end
end