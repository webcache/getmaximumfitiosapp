name: iOS Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - production

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
  EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN }}
  EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL }}
  EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID }}
  EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET }}
  EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
  EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID }}
  EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID }}
  EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID }}
  EXPO_PUBLIC_API_BASE_URL: ${{ secrets.EXPO_PUBLIC_API_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  EXPO_PUBLIC_OPENAI_API_KEY: ${{ secrets.EXPO_PUBLIC_OPENAI_API_KEY }}
  EXPO_PUBLIC_REVENUECAT_IOS_API_KEY: ${{ secrets.EXPO_PUBLIC_REVENUECAT_IOS_API_KEY }}
  EXPO_PUBLIC_REVENUECAT_ANDROID_API_KEY: ${{ secrets.EXPO_PUBLIC_REVENUECAT_ANDROID_API_KEY }}

jobs:
  # Job 1: Code Quality and Testing
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v4

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: üßπ Clean package manager conflicts
        run: |
          # Remove yarn.lock to prevent package manager conflicts since we're using npm
          if [ -f "yarn.lock" ]; then
            echo "Removing yarn.lock to prevent conflicts with npm"
            rm yarn.lock
          fi

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç TypeScript check
        run: npx tsc --noEmit

      - name: ‚úÖ Code quality check completed
        run: echo "‚úÖ TypeScript check passed - code quality verified"

  # Job 2: Build iOS App
  build-ios:
    name: Build iOS App
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v4

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèó Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli@latest
          npm install -g eas-cli@latest

      - name: üîê Verify Expo authentication
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "Checking Expo authentication..."
          if [ -z "$EXPO_TOKEN" ]; then
            echo "‚ùå EXPO_TOKEN environment variable is not set"
            exit 1
          else
            echo "‚úÖ EXPO_TOKEN environment variable is set"
            echo "Testing EAS CLI authentication..."
            eas whoami || {
              echo "‚ùå EAS authentication failed"
              echo "Please check if your EXPO_TOKEN secret is valid"
              exit 1
            }
            echo "‚úÖ EAS authentication successful"
            echo "Project info:"
            eas project:info
          fi

      - name: üîÑ Verify HealthKit provisioning setup
        run: |
          echo "‚úÖ AdHoc provisioning profile manually updated with HealthKit entitlements"
          echo "Profile ID: 8GZ7N96R84 - Updated with HealthKit capability"
          echo "Ready to build TestFlight version with HealthKit support"

      - name: üî¢ Verify app configuration
        run: |
          echo "üì± Checking app.json configuration..."
          echo "Version: $(grep -o '"version": "[^"]*"' app.json)"
          echo "Build Number (local baseline): $(grep -o '"buildNumber": "[^"]*"' app.json)"
          echo "Bundle ID: $(grep -o '"bundleIdentifier": "[^"]*"' app.json)"
          
          echo "üìã Checking EAS configuration..."
          echo "EAS auto-increment enabled for both TestFlight and Production builds"
          echo "Build numbers will stay synchronized across all deployment types"
          echo "Preview Auto Increment: $(grep -A 3 '"preview"' eas.json | grep autoIncrement)"
          echo "Production Auto Increment: $(grep -A 3 '"production"' eas.json | grep autoIncrement)"

      - name: üçé Build iOS for TestFlight (Preview)
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        env:
          EAS_SKIP_AUTO_FINGERPRINT: 1
        run: |
          echo "üîß AdHoc profile updated with HealthKit entitlements - ready to build!"
          echo "Using updated provisioning profile (ID: 8GZ7N96R84) with HealthKit support"
          
          echo "üî¢ EAS will auto-increment build number for TestFlight builds"
          echo "Build numbers synchronized between TestFlight and Production"
          
          echo "üóëÔ∏è Clearing all EAS caches to ensure fresh build with auto-incremented build number..."
          
          echo "üöÄ Starting TestFlight build with auto-incremented build number..."
          eas build --platform ios --profile preview --non-interactive --wait --clear-cache

      - name: üöÄ Submit to TestFlight (Preview builds)
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        run: |
          if eas submit --platform ios --profile preview --latest --non-interactive; then
            echo "‚úÖ iOS app submitted to TestFlight successfully"
          else
            echo "‚ö†Ô∏è iOS app TestFlight submission failed or not configured"
          fi
        continue-on-error: true

      - name: üçé Build iOS for Production
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'production'))
        env:
          EAS_SKIP_AUTO_FINGERPRINT: 1
        run: |
          echo "üî¢ EAS will auto-increment build number for Production builds"
          echo "Build numbers synchronized between TestFlight and Production"
          
          echo "üóëÔ∏è Clearing all EAS caches to ensure fresh build with auto-incremented build number..."
          
          echo "üöÄ Starting Production build with auto-incremented build number..."
          eas build --platform ios --profile production --non-interactive --wait --clear-cache

      - name: üöÄ Submit to App Store (Production builds only)
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'production'))
        run: |
          if eas submit --platform ios --latest --non-interactive; then
            echo "‚úÖ iOS app submitted to App Store successfully"
          else
            echo "‚ö†Ô∏è iOS app submission failed or not configured"
          fi
        continue-on-error: true

  # Job 3: Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: build-ios
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: üì¢ Deployment Summary
        run: |
          echo "üéâ iOS deployment completed!"
          echo "üì± iOS Build: ${{ needs.build-ios.result }}"
