name: iOS CI (Self-Hosted) - Hybrid
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-build:
    name: üçé iOS Build (Self-Hosted Hybrid)
    runs-on: [self-hosted, macOS, ARM64, xcode-15]
    steps:
      - name: üîç Debug Environment
        run: |
          echo "Node version: $(node --version)"
          echo "Xcode version: $(xcodebuild -version)"
          echo "Ruby version: $(ruby --version)"
          echo "Working directory: $(pwd)"
          echo "Fastlane config check:"
          ls -la ~/.fastlane* 2>/dev/null || echo "No existing Fastlane config found"

      - name: üßπ Pre-Checkout Cleanup
        run: |
          echo "üßπ Cleaning up any existing git credentials..."
          
          # Clear any existing git credential cache that might cause hanging
          git config --global --unset credential.helper 2>/dev/null || true
          rm -f ~/.git-credentials* 2>/dev/null || true
          
          # Clear any GitHub Desktop or other git credential managers
          security delete-generic-password -s "github.com" 2>/dev/null || true
          security delete-internet-password -s "github.com" 2>/dev/null || true
          
          echo "‚úÖ Git credential cleanup completed"

      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚ö° Use Local Node.js
        run: |
          echo "Using local Node.js to skip setup-node"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: üì¶ Cache Dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ios/Pods
            ~/.yarn/cache
            ~/.npm/_cacache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/Podfile.lock', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: üì¶ Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: üì¶ Install iOS Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ios
        run: |
          bundle install
          bundle exec pod install

      - name: üßπ Setup CI Keychain
        run: |
          echo "Setting up isolated CI keychain..."
          
          # Delete any existing ci keychains
          security delete-keychain ci-keys.keychain 2>/dev/null || true
          
          # Create a new keychain for CI (using the name from Matchfile)
          security create-keychain -p "$CI_KEYCHAIN_PWD" ci-keys.keychain
          security set-keychain-settings -lut 21600 ci-keys.keychain
          security unlock-keychain -p "$CI_KEYCHAIN_PWD" ci-keys.keychain
          security list-keychains -d user -s ci-keys.keychain
          
          echo "‚úÖ CI keychain setup complete"
        env:
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}

      - name: üîß Setup Git Authentication for Match
        run: |
          echo "üîë Setting up git authentication for Match repository..."
          
          # Clear any existing git credentials (redundant but safe)
          git config --global --unset credential.helper 2>/dev/null || true
          rm -f ~/.git-credentials* 2>/dev/null || true
          
          # Decode and clean up the git authentication token
          AUTH_STRING=$(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | base64 --decode)
          USERNAME=$(echo "$AUTH_STRING" | cut -d: -f1)
          TOKEN=$(echo "$AUTH_STRING" | cut -d: -f2 | tr -d '\n\r')  # Strip newlines that cause issues
          
          echo "GitHub Username: $USERNAME"
          echo "Token length after cleanup: ${#TOKEN}"
          echo "üîç Secret format check - should end with 'bw==': $(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | tail -c 5)"
          
          # Ensure username is correct for the repository
          if [ "$USERNAME" != "webcache" ]; then
            echo "‚ö†Ô∏è  Correcting username to 'webcache'"
            USERNAME="webcache"
          fi
          
          # Test git authentication methods using the proven approach from ios-ci-self-hosted.yml
          echo "Testing git authentication methods..."
          
          # Method 1: Test with token in URL
          AUTHENTICATED_URL=$(echo "$MATCH_GIT_URL" | sed 's|https://|https://webcache:'$TOKEN'@|')
          echo "Method 1: Testing with token in URL..."
          git ls-remote "$AUTHENTICATED_URL" > /dev/null 2>&1 && {
            echo "‚úÖ Method 1 successful: Token in URL works"
            GIT_AUTH_METHOD="url"
          } || {
            echo "‚ùå Method 1 failed: Token in URL"
            
            # Method 2: Test with credential helper
            echo "Method 2: Testing with credential helper..."
            git config --global credential.helper store
            echo "https://webcache:$TOKEN@github.com" > ~/.git-credentials
            
            git ls-remote "$MATCH_GIT_URL" > /dev/null 2>&1 && {
              echo "‚úÖ Method 2 successful: Credential helper works"
              GIT_AUTH_METHOD="credential"
            } || {
              echo "‚ùå Method 2 failed: Credential helper"
              
              # Method 3: Test with git config url rewrite
              echo "Method 3: Testing with git URL rewrite..."
              git config --global url."https://webcache:$TOKEN@github.com/".insteadOf "https://github.com/"
              
              git ls-remote "$MATCH_GIT_URL" > /dev/null 2>&1 && {
                echo "‚úÖ Method 3 successful: URL rewrite works"
                GIT_AUTH_METHOD="rewrite"
              } || {
                echo "‚ùå All git authentication methods failed"
                echo "Repository URL: ${AUTHENTICATED_URL//$TOKEN/***}"
                echo "Checking repository existence via API..."
                API_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/webcache/githubactionsstore")
                echo "API Response: $(echo "$API_RESPONSE" | jq -r '.message // "Repository accessible via API"')"
                
                # Check token permissions
                echo "Checking token permissions..."
                USER_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/user")
                echo "Token user: $(echo "$USER_RESPONSE" | jq -r '.login // "Token validation failed"')"
                
                # Check token scopes
                echo "Checking token scopes..."
                curl -s -I -H "Authorization: token $TOKEN" "https://api.github.com/user" | grep -i "x-oauth-scopes" || echo "No scope information available"
                
                echo "‚ö†Ô∏è  Git authentication failed but API works - this suggests token scope issues"
                echo "üìù Common cause: Token needs 'repo' scope for private repository git operations"
                echo "üîß Will attempt to proceed with Match using alternative git URL method..."
                
                # Set a fallback method and continue (don't exit)
                GIT_AUTH_METHOD="url"
                echo "Proceeding with token-in-URL method for Match execution"
              }
            }
          }
          
          # Configure git credentials for this session using the working method
          case "$GIT_AUTH_METHOD" in
            "url")
              echo "Using token in URL method for git authentication"
              # Set environment variable for Match to use authenticated URL
              echo "MATCH_GIT_URL_AUTHENTICATED=$AUTHENTICATED_URL" >> $GITHUB_ENV
              ;;
            "credential")
              echo "Using credential helper method for git authentication"
              git config --global credential.helper store
              echo "https://webcache:$TOKEN@github.com" > ~/.git-credentials
              ;;
            "rewrite")
              echo "Using URL rewrite method for git authentication"
              git config --global url."https://webcache:$TOKEN@github.com/".insteadOf "https://github.com/"
              ;;
          esac
          
          echo "‚úÖ Git authentication configured successfully using $GIT_AUTH_METHOD method"
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}

      - name: üçé Setup App Store Connect API
        working-directory: ios
        run: |
          echo "üîë Setting up App Store Connect API authentication..."
          
          # Create the keys directory for API key
          mkdir -p fastlane/keys
          
          # Write the API key content to the expected location
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > fastlane/keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Verify the key file was created
          if [ -f "fastlane/keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8" ]; then
            echo "‚úÖ App Store Connect API key file created successfully"
            echo "Key ID: $APP_STORE_CONNECT_API_KEY_ID"
            echo "Issuer ID: $APP_STORE_CONNECT_ISSUER_ID"
          else
            echo "‚ùå Failed to create API key file"
            exit 1
          fi
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      - name: üçé Hybrid Match Authentication
        working-directory: ios
        run: |
          echo "üîÑ Using hybrid authentication approach..."
          echo "- Git authentication: GitHub Actions secrets (proven working)"
          echo "- App Store Connect: API key from GitHub secrets"
          
          # Clear only Match caches, preserve other configurations
          echo "Clearing Match-specific caches only..."
          rm -rf ~/.match_version_check 2>/dev/null || true
          rm -rf /tmp/match* 2>/dev/null || true
          
          # Check existing certificates first
          echo "üîç Checking existing code signing identities..."
          security find-identity -v -p codesigning login.keychain-db || echo "No certificates in login keychain"
          
          # Set CI environment variable so Matchfile uses ci-keys.keychain
          export CI=true
          export GITHUB_ACTIONS=true
          
          echo "üîç Running Match with hybrid authentication..."
          echo "Git repo access: GitHub secrets"
          echo "Apple Developer Portal: App Store Connect API from GitHub secrets"
          
          # If we have an authenticated URL from the previous step, temporarily update the Matchfile
          if [ -n "$MATCH_GIT_URL_AUTHENTICATED" ]; then
            echo "Using authenticated git URL for Match"
            cp fastlane/Matchfile fastlane/Matchfile.backup
            sed 's|git_url("https://github.com/webcache/githubactionsstore.git")|git_url("'$MATCH_GIT_URL_AUTHENTICATED'")|' fastlane/Matchfile.backup > fastlane/Matchfile
          fi
          
          # Run Match without readonly - let it create certificates if needed
          bundle exec fastlane match appstore --force --verbose --skip_confirmation || {
            echo "‚ùå Match failed with error code $?"
            
            # Restore original Matchfile if we modified it
            if [ -f "fastlane/Matchfile.backup" ]; then
              mv fastlane/Matchfile.backup fastlane/Matchfile
            fi
            
            exit 1
          }
          
          # Restore original Matchfile if we modified it
          if [ -f "fastlane/Matchfile.backup" ]; then
            mv fastlane/Matchfile.backup fastlane/Matchfile
          fi
          
          echo "‚úÖ Match completed successfully with hybrid authentication!"
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          # Spaceship environment variables for App Store Connect API
          SPACESHIP_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          SPACESHIP_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          SPACESHIP_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          # Git authentication handled by credential helper setup above

      - name: üî® Build iOS App
        working-directory: ios
        run: |
          echo "üî® Building iOS app with certificates from Match..."
          bundle exec fastlane build_app scheme:"getmaximumfitiosapp" configuration:"Release"
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          # Rely on Mac mini's App Store Connect API configuration

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up CI-specific resources..."
          
          # Remove CI keychain
          security delete-keychain ci-keys.keychain 2>/dev/null || true
          
          # Clean up git authentication based on method used
          echo "Cleaning up git authentication..."
          
          # Remove credential helper if used
          rm -f ~/.git-credentials 2>/dev/null || true
          git config --global --unset credential.helper 2>/dev/null || true
          
          # Remove URL rewrite if used
          git config --global --unset url."https://webcache:.*@github.com/".insteadOf 2>/dev/null || true
          git config --global --remove-section url 2>/dev/null || true
          
          # Remove temporary API key file
          rm -f ios/fastlane/keys/AuthKey_*.p8 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"
