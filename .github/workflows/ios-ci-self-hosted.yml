name: iOS CI Self-Hosted

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - production

env:
  # Firebase Configuration
  EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
  EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN }}
  EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL }}
  EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID }}
  EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET }}
  EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
  EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID }}
  
  # Google OAuth Configuration
  EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID }}
  EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID }}
  
  # API Configuration
  EXPO_PUBLIC_API_BASE_URL: ${{ secrets.EXPO_PUBLIC_API_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  EXPO_PUBLIC_OPENAI_API_KEY: ${{ secrets.EXPO_PUBLIC_OPENAI_API_KEY }}
  
  # RevenueCat Configuration
  EXPO_PUBLIC_REVENUECAT_IOS_API_KEY: ${{ secrets.EXPO_PUBLIC_REVENUECAT_IOS_API_KEY }}

  
  # Expo Configuration
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  # Job 1: Code Quality and Testing
  quality-check:
    name: Code Quality Check
    runs-on: [self-hosted, macOS, ARM64, xcode-15]
    timeout-minutes: 15
    steps:
      - name: 🧹 Clean up CI keychains
        run: |
          echo "Cleaning up any existing CI keychains..."
          
          # Restore login keychain as default
          security default-keychain -s login.keychain
          
          # Remove any CI keychains from search list
          security list-keychains -s login.keychain
          
          # Delete any existing CI keychains
          security delete-keychain ci-keys.keychain || true
          for keychain in $(security list-keychains | grep -i ci-keys | tr -d '"' | xargs); do
            security delete-keychain "$keychain" || true
            echo "Deleted keychain: $keychain"
          done
          
          echo "CI keychain cleanup completed"

      - name: 🧹 Clean up existing processes
        run: |
          echo "Cleaning up any existing TypeScript or Node processes..."
          # Kill any existing TypeScript server processes
          pkill -f "tsserver" || true
          pkill -f "typescript" || true
          # Clean up any node processes that might be hanging
          pkill -f "node.*tsc" || true
          # Clean up any git processes that might be hanging
          pkill -f "git fetch" || true
          pkill -f "git clone" || true
          
          # Check runner workspace
          echo "Current working directory: $(pwd)"
          echo "Workspace contents:"
          ls -la ${{ github.workspace }} || echo "Workspace doesn't exist yet"
          
          # Clean up any stale git locks
          find ${{ github.workspace }} -name "*.lock" -delete 2>/dev/null || true
          
          echo "Process cleanup completed"

      - name: 🌐 Test network connectivity
        run: |
          echo "Testing network connectivity..."
          ping -c 3 github.com || echo "Ping failed"
          curl -I https://github.com || echo "Curl failed"
          echo "Network test completed"

      - name: 🔐 Setup Git Authentication
        run: |
          echo "Setting up git authentication for webcache account..."
          echo "Current git config:"
          git config --global --list | grep -E "(user\.|credential\.|url\.)" || echo "No relevant git config found"
          
          # Completely reset git configuration
          git config --global --unset-all credential.helper || true
          git config --global --unset-all url.https://github.com/.insteadOf || true
          rm -f ~/.git-credentials || true
          rm -f ~/.gitconfig || true
          
          # Set up fresh git configuration
          git config --global user.name "webcache"
          git config --global user.email "actions@github.com"
          git config --global init.defaultBranch main
          
          # Configure git to use token authentication for this session
          git config --global credential.helper "store --file ~/.git-credentials-ci"
          echo "https://webcache:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials-ci
          
          echo "Testing GitHub access with token..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user || echo "GitHub API test failed"
          
          echo "Git authentication configured with fresh credentials"

      - name: 🏗 Setup repo
        uses: actions/checkout@v4
        timeout-minutes: 5
        with:
          clean: true
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GIT_TRACE: 1
          GIT_CURL_VERBOSE: 1
          
      - name: 🔄 Fallback git setup (if needed)
        if: failure()
        run: |
          echo "Standard checkout failed, trying manual git setup..."
          cd ${{ github.workspace }} || true
          
          # Configure git with authentication
          git config --global http.postBuffer 1048576000
          git config --global http.maxRequestBuffer 100M
          git config --global core.compression 0
          git config --global user.name "webcache"
          git config --global user.email "actions@github.com"
          
          # Use GitHub token for authentication
          git clone --depth 1 --single-branch --branch main https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git . || {
            echo "Clone failed, trying reset..."
            git reset --hard origin/main || true
          }

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 🧹 Clean package manager conflicts
        run: |
          if [ -f "yarn.lock" ]; then
            echo "Removing yarn.lock to prevent conflicts with npm"
            rm yarn.lock
          fi

      - name: 📦 Install dependencies
        run: |
          echo "Installing npm dependencies..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          npm ci --verbose
          echo "Dependencies installed successfully!"

      - name: 🔍 TypeScript check
        timeout-minutes: 5
        run: |
          echo "Starting TypeScript compilation check..."
          echo "Project files count: $(find . -name "*.ts" -o -name "*.tsx" | wc -l)"
          
          # Clear any TypeScript caches
          rm -rf .tsbuildinfo node_modules/.cache || true
          
          echo "Running: npx tsc --noEmit"
          npx tsc --noEmit --pretty --incremental false
          echo "TypeScript check completed successfully!"

      - name: ✅ Code quality check completed
        run: echo "✅ TypeScript check passed - code quality verified"

      - name: 🧹 Cleanup Git Credentials
        if: always()
        run: |
          echo "Cleaning up temporary git credentials..."
          rm -f ~/.git-credentials-ci || true
          git config --global --unset credential.helper || true
          echo "Git credentials cleanup completed"

  # Job 2: Build iOS App
  build-ios:
    name: Build iOS App
    runs-on: [self-hosted, macOS, ARM64, xcode-15]
    timeout-minutes: 60
    needs: quality-check
    steps:
      - name: 🧹 Clean up CI keychains
        run: |
          echo "Cleaning up any existing CI keychains..."
          
          # Restore login keychain as default
          security default-keychain -s login.keychain
          
          # Remove any CI keychains from search list
          security list-keychains -s login.keychain
          
          # Delete any existing CI keychains
          security delete-keychain ci-keys.keychain || true
          for keychain in $(security list-keychains | grep -i ci-keys | tr -d '"' | xargs); do
            security delete-keychain "$keychain" || true
            echo "Deleted keychain: $keychain"
          done
          
          echo "CI keychain cleanup completed"

      - name: 🧹 Clean up existing processes
        run: |
          echo "Cleaning up any existing processes..."
          pkill -f "tsserver" || true
          pkill -f "typescript" || true
          pkill -f "node.*tsc" || true
          echo "Process cleanup completed"

      - name: 🔐 Setup Git Authentication
        run: |
          echo "Setting up git authentication for webcache account..."
          
          # Completely reset git configuration
          git config --global --unset-all credential.helper || true
          git config --global --unset-all url.https://github.com/.insteadOf || true
          rm -f ~/.git-credentials || true
          
          # Set up fresh git configuration
          git config --global user.name "webcache"
          git config --global user.email "actions@github.com"
          
          # Configure git to use token authentication for this session
          git config --global credential.helper "store --file ~/.git-credentials-ci"
          echo "https://webcache:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials-ci
          
          echo "Git authentication configured"

      - name: 🏗 Setup repo
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install JavaScript dependencies
        run: npm ci

      - name: ✍️ Write GoogleService-Info.plist
        run: |
          echo "$IOS_GOOGLE_SERVICE_PLIST_B64" | base64 --decode > ios/GetMaximumFit/GoogleService-Info.plist
        env:
          IOS_GOOGLE_SERVICE_PLIST_B64: ${{ secrets.IOS_GOOGLE_SERVICE_PLIST_B64 }}

      - name: 🔑 Setup App Store Connect API Key
        run: |
          mkdir -p ios/fastlane/keys
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > ios/fastlane/keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        env:
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      - name:  iOS deps
        working-directory: ios
        run: |
          gem install bundler --no-document
          bundle install --jobs 4
          bundle exec pod install --repo-update

      - name: 🔑 Setup CI Keychain
        run: |
          # Delete keychain if it exists to start fresh
          security delete-keychain ci-keys.keychain || true
          
          # Create new keychain with a unique name to avoid conflicts
          KEYCHAIN_NAME="ci-keys-$(date +%s).keychain"
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV
          
          # Create new keychain
          security create-keychain -p "$CI_KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          
          # Set keychain settings (shorter timeout for CI)
          security set-keychain-settings -t 1800 -l "$KEYCHAIN_NAME"
          
          # Add to keychain search list (but keep login.keychain as primary)
          security list-keychains -s "$KEYCHAIN_NAME" login.keychain
          
          # Set as default keychain only for this session
          security default-keychain -s "$KEYCHAIN_NAME"
          
          # Unlock keychain
          security unlock-keychain -p "$CI_KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          
          echo "✅ CI keychain $KEYCHAIN_NAME created and configured"
        env:
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}

      - name: 🧪 Test Match Configuration
        working-directory: ios
        run: |
          echo "🔍 Testing Match password and git access..."
          
          # Configure git authentication using the authorization token
          echo "Setting up git authentication..."
          AUTH_STRING=$(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | base64 --decode)
          USERNAME=$(echo "$AUTH_STRING" | cut -d: -f1)
          TOKEN=$(echo "$AUTH_STRING" | cut -d: -f2)
          
          # Configure git credentials for this session using multiple methods
          git config --global credential.helper store
          echo "https://$USERNAME:$TOKEN@github.com" > ~/.git-credentials
          
          # Also configure git to use the token for this specific repository
          git config --global url."https://$USERNAME:$TOKEN@github.com/".insteadOf "https://github.com/"
          
          # Test git access first
          echo "Testing git repository access..."
          git ls-remote "$MATCH_GIT_URL" > /dev/null && echo "✅ Git access successful" || echo "❌ Git access failed"
          
          # Test Match password - ensure MATCH_GIT_BASIC_AUTHORIZATION is available to Match
          echo "Testing Match password..."
          env MATCH_GIT_BASIC_AUTHORIZATION="$MATCH_GIT_BASIC_AUTHORIZATION" bundle exec fastlane match appstore --readonly || {
            echo "❌ Match test failed - checking details..."
            echo "Git URL: $MATCH_GIT_URL"
            echo "Match password length: ${#MATCH_PASSWORD}"
            exit 1
          }
          
          # Clean up credentials
          rm -f ~/.git-credentials
          git config --global --unset credential.helper
          git config --global --unset url."https://$USERNAME:$TOKEN@github.com/".insteadOf
          
          echo "✅ Match configuration test passed!"
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

      - name: 🍎 Fastlane Beta
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        working-directory: ios
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          ASC_KEY_PATH: "./fastlane/keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        run: |
          # Set up git authentication for Match
          AUTH_STRING=$(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | base64 --decode)
          USERNAME=$(echo "$AUTH_STRING" | cut -d: -f1)
          TOKEN=$(echo "$AUTH_STRING" | cut -d: -f2)
          git config --global credential.helper store
          echo "https://$USERNAME:$TOKEN@github.com" > ~/.git-credentials
          git config --global url."https://$USERNAME:$TOKEN@github.com/".insteadOf "https://github.com/"
          
          # Run Fastlane
          bundle exec fastlane beta
          
          # Clean up
          rm -f ~/.git-credentials
          git config --global --unset credential.helper || true
          git config --global --unset url."https://$USERNAME:$TOKEN@github.com/".insteadOf || true

      - name: 🍎 Fastlane Production
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'production')) && !(github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        working-directory: ios
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          ASC_KEY_PATH: "./fastlane/keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        run: |
          # Set up git authentication for Match
          AUTH_STRING=$(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | base64 --decode)
          USERNAME=$(echo "$AUTH_STRING" | cut -d: -f1)
          TOKEN=$(echo "$AUTH_STRING" | cut -d: -f2)
          git config --global credential.helper store
          echo "https://$USERNAME:$TOKEN@github.com" > ~/.git-credentials
          git config --global url."https://$USERNAME:$TOKEN@github.com/".insteadOf "https://github.com/"
          
          # Run Fastlane
          bundle exec fastlane deploy_app_store
          
          # Clean up
          rm -f ~/.git-credentials
          git config --global --unset credential.helper || true
          git config --global --unset url."https://$USERNAME:$TOKEN@github.com/".insteadOf || true

      - name: 🧹 Cleanup CI Keychain
        if: always()
        run: |
          echo "Cleaning up CI keychain..."
          
          # Restore login keychain as default
          security default-keychain -s login.keychain
          
          # Remove CI keychain from search list
          security list-keychains -s login.keychain
          
          # Delete the CI keychain if it exists
          if [ -n "${KEYCHAIN_NAME:-}" ]; then
            security delete-keychain "$KEYCHAIN_NAME" || true
            echo "✅ Deleted CI keychain: $KEYCHAIN_NAME"
          else
            # Fallback: delete any ci-keys keychains
            security delete-keychain ci-keys.keychain || true
            security delete-keychain ci-keys-*.keychain || true
            echo "✅ Cleaned up any existing ci-keys keychains"
          fi
          
          echo "Keychain cleanup completed"

  # Job 3: Notify on completion
  notify:
    name: Notify Completion
    runs-on: [self-hosted, macOS, ARM64, xcode-15]
    needs: build-ios
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 📢 Deployment Summary
        run: |
          echo "🎉 iOS deployment completed!"
          echo "📱 iOS Build: ${{ needs.build-ios.result }}"