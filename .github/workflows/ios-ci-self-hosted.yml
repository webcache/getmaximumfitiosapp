name: iOS CI Self-Hosted

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - production

env:
  # Firebase Configuration
  EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
  EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN }}
  EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL }}
  EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID }}
  EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET }}
  EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
  EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID }}
  
  # Google OAuth Configuration
  EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID }}
  EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID }}
  
  # API Configuration
  EXPO_PUBLIC_API_BASE_URL: ${{ secrets.EXPO_PUBLIC_API_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  EXPO_PUBLIC_OPENAI_API_KEY: ${{ secrets.EXPO_PUBLIC_OPENAI_API_KEY }}
  
  # RevenueCat Configuration
  EXPO_PUBLIC_REVENUECAT_IOS_API_KEY: ${{ secrets.EXPO_PUBLIC_REVENUECAT_IOS_API_KEY }}
  EXPO_PUBLIC_REVENUECAT_ANDROID_API_KEY: ${{ secrets.EXPO_PUBLIC_REVENUECAT_ANDROID_API_KEY }}
  
  # Expo Configuration
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  # Job 1: Code Quality and Testing
  quality-check:
    name: Code Quality Check
    runs-on: [self-hosted, macos, xcode-15]
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v4

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: üì¶ Install dependencies
        run: |
          corepack enable || true
          yarn install --frozen-lockfile

      - name: üîç TypeScript check
        run: npx tsc --noEmit

      - name: ‚úÖ Code quality check completed
        run: echo "‚úÖ TypeScript check passed - code quality verified"

  # Job 2: Build iOS App
  build-ios:
    name: Build iOS App
    runs-on: [self-hosted, macos, xcode-15]
    needs: quality-check
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v4

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: üì¶ Install JavaScript dependencies
        run: |
          corepack enable || true
          yarn install --frozen-lockfile

      - name: üèó Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli@latest
          npm install -g eas-cli@latest

      - name: üîê Verify Expo authentication
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "Checking Expo authentication..."
          if [ -z "$EXPO_TOKEN" ]; then
            echo "‚ùå EXPO_TOKEN environment variable is not set"
            exit 1
          else
            echo "‚úÖ EXPO_TOKEN environment variable is set"
            echo "Testing EAS CLI authentication..."
            eas whoami || {
              echo "‚ùå EAS authentication failed"
              echo "Please check if your EXPO_TOKEN secret is valid"
              exit 1
            }
            echo "‚úÖ EAS authentication successful"
            echo "Project info:"
            eas project:info
          fi

      - name: üîß Pre-build iOS project
        run: |
          echo "üîß Running Expo prebuild to generate iOS project..."
          npx expo prebuild --platform ios --clean

      - name: üíé Setup Ruby and iOS dependencies
        working-directory: ios
        run: |
          gem install bundler --no-document
          bundle install --jobs 4
          bundle exec pod install --repo-update

      - name: üîë Prepare keychain
        run: |
          security list-keychains -s ci-keys.keychain login.keychain
          security default-keychain -s ci-keys.keychain
          security unlock-keychain -p "$CI_KEYCHAIN_PWD" ci-keys.keychain
        env:
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}

      - name: üî¢ Verify app configuration
        run: |
          echo "üì± Checking app.json configuration..."
          echo "Version: $(grep -o '"version": "[^"]*"' app.json)"
          echo "Build Number (local baseline): $(grep -o '"buildNumber": "[^"]*"' app.json)"
          echo "Bundle ID: $(grep -o '"bundleIdentifier": "[^"]*"' app.json)"
          
          echo "üîë Verifying critical environment variables..."
          echo "EXPO_PUBLIC_OPENAI_API_KEY set: $([[ -n "$EXPO_PUBLIC_OPENAI_API_KEY" ]] && echo "‚úÖ Yes (${#EXPO_PUBLIC_OPENAI_API_KEY} chars)" || echo "‚ùå No")"
          echo "OPENAI_API_KEY set: $([[ -n "$OPENAI_API_KEY" ]] && echo "‚úÖ Yes (${#OPENAI_API_KEY} chars)" || echo "‚ùå No")"
          echo "EXPO_PUBLIC_REVENUECAT_IOS_API_KEY set: $([[ -n "$EXPO_PUBLIC_REVENUECAT_IOS_API_KEY" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
          
          # Show first few characters of API keys for debugging (if they exist)
          if [[ -n "$EXPO_PUBLIC_OPENAI_API_KEY" ]]; then
            echo "EXPO_PUBLIC_OPENAI_API_KEY preview: ${EXPO_PUBLIC_OPENAI_API_KEY:0:15}..."
          fi
          if [[ -n "$OPENAI_API_KEY" ]]; then
            echo "OPENAI_API_KEY preview: ${OPENAI_API_KEY:0:15}..."
          fi

      - name: üçé Build iOS for TestFlight (Beta)
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        working-directory: ios
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_PATH: ${{ secrets.ASC_KEY_PATH }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}
        run: |
          echo "üöÄ Starting TestFlight build with Fastlane..."
          bundle exec fastlane beta

      - name: üçé Build iOS for Production
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'production')) && !(github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'testflight')
        working-directory: ios
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_PATH: ${{ secrets.ASC_KEY_PATH }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          CI_KEYCHAIN_PWD: ${{ secrets.CI_KEYCHAIN_PWD }}
        run: |
          echo "üöÄ Starting Production build with Fastlane..."
          bundle exec fastlane deploy_app_store

  # Job 3: Notify on completion
  notify:
    name: Notify Completion
    runs-on: [self-hosted, macos, xcode-15]
    needs: build-ios
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: üì¢ Deployment Summary
        run: |
          echo "üéâ iOS deployment completed!"
          echo "üì± iOS Build: ${{ needs.build-ios.result }}"
