# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    # Ensure we have the latest code
    ensure_git_status_clean
    
    begin
      UI.message("üöÄ Starting EAS build for preview profile...")
      
      # Build using EAS
      sh("cd .. && eas build --platform ios --profile preview --non-interactive --clear-cache")
      
      UI.message("‚úÖ EAS build completed successfully")
      
      # Get the latest build URL from EAS
      UI.message("üì• Fetching build URL from EAS...")
      build_url = sh("cd .. && eas build:list --platform ios --limit 1 --json | jq -r '.[0].artifacts.buildUrl'").strip
      
      if build_url.nil? || build_url.empty? || build_url == "null"
        UI.user_error!("‚ùå Could not retrieve build URL from EAS. Please check the build status.")
      end
      
      UI.message("üì¶ Build URL: #{build_url}")
      
      # Download the build
      UI.message("‚¨áÔ∏è Downloading IPA from EAS...")
      download_url(
        url: build_url,
        download_to: "./build.ipa"
      )
      
      # Verify the IPA was downloaded
      unless File.exist?("./build.ipa")
        UI.user_error!("‚ùå Failed to download IPA file")
      end
      
      UI.message("üì± Uploading to TestFlight...")
      
      # Upload to TestFlight
      upload_to_testflight(
        ipa: "./build.ipa",
        skip_waiting_for_build_processing: false,
        apple_id: ENV["APPLE_ID"],
        app_identifier: "com.getmaximumfreedomandfitness.getmaximumfitiosapp",
        team_id: ENV["APPLE_TEAM_ID"],
        dev_portal_team_id: ENV["APPLE_TEAM_ID"]
      )
      
      UI.success("üéâ Successfully uploaded to TestFlight!")
      
    rescue => exception
      UI.error("‚ùå Build failed: #{exception.message}")
      
      # Check if this is an EAS build failure
      if exception.message.include?("eas build")
        UI.message("üîç Checking EAS build logs...")
        sh("cd .. && eas build:list --platform ios --limit 1")
      end
      
      raise exception
    ensure
      # Clean up
      sh("rm -f ./build.ipa") if File.exist?("./build.ipa")
    end
    
    # Send notification
    slack(
      message: "Successfully uploaded new beta build to TestFlight! üöÄ",
      slack_url: ENV["SLACK_WEBHOOK_URL"]
    ) if ENV["SLACK_WEBHOOK_URL"]
  end

  desc "Build and upload to App Store"
  lane :release do
    # Ensure we have the latest code
    ensure_git_status_clean
    
    # Ensure we're on main branch
    ensure_git_branch(branch: "main")
    
    # Build using EAS for production
    sh("cd .. && eas build --platform ios --profile production --non-interactive --clear-cache")
    
    # Get the latest build URL from EAS
    build_url = sh("cd .. && eas build:list --platform ios --limit 1 --json | jq -r '.[0].artifacts.buildUrl'").strip
    
    # Download the build
    download_url(
      url: build_url,
      download_to: "./build.ipa"
    )
    
    # Upload to App Store
    deliver(
      ipa: "./build.ipa",
      app_identifier: "com.getmaximumfreedomandfitness.getmaximumfitiosapp",
      team_id: ENV["APPLE_TEAM_ID"],
      dev_portal_team_id: ENV["APPLE_TEAM_ID"],
      submit_for_review: false,
      automatic_release: false,
      force: true,
      skip_metadata: false,
      skip_screenshots: true,
      skip_binary_upload: false
    )
    
    # Clean up
    sh("rm -f ./build.ipa")
    
    # Send notification
    slack(
      message: "Successfully uploaded new release build to App Store Connect! üì±",
      slack_url: ENV["SLACK_WEBHOOK_URL"]
    ) if ENV["SLACK_WEBHOOK_URL"]
  end

  desc "Update metadata and screenshots"
  lane :metadata do
    deliver(
      app_identifier: "com.getmaximumfreedomandfitness.getmaximumfitiosapp",
      team_id: ENV["APPLE_TEAM_ID"],
      skip_binary_upload: true,
      skip_screenshots: false,
      force: true
    )
  end

  desc "Download certificates and provisioning profiles"
  lane :certificates do
    match(
      type: "appstore",
      app_identifier: "com.getmaximumfreedomandfitness.getmaximumfitiosapp",
      team_id: ENV["APPLE_TEAM_ID"]
    )
    
    match(
      type: "development",
      app_identifier: "com.getmaximumfreedomandfitness.getmaximumfitiosapp",
      team_id: ENV["APPLE_TEAM_ID"]
    )
  end

  desc "Update version number"
  lane :version_bump do |options|
    type = options[:type] || "patch"
    
    # Update app.json version
    sh("cd .. && npm version #{type} --no-git-tag-version")
    
    # Get the new version
    version = sh("cd .. && node -p \"require('./package.json').version\"").strip
    
    # Update app.json with new version
    sh("cd .. && sed -i '' 's/\"version\": \".*\"/\"version\": \"#{version}\"/' app.json")
    
    # Commit changes
    git_add(path: ["../app.json", "../package.json"])
    git_commit(path: ["../app.json", "../package.json"], message: "Bump version to #{version}")
    add_git_tag(tag: "v#{version}")
    push_to_git_remote
    
    UI.success("Version bumped to #{version}")
  end

  desc "Check EAS build status and logs"
  lane :check_build do
    UI.message("üìã Checking latest EAS builds...")
    sh("cd .. && eas build:list --platform ios --limit 5")
    
    UI.message("üîç Getting detailed build info...")
    build_info = sh("cd .. && eas build:list --platform ios --limit 1 --json")
    puts build_info
  end

  desc "Setup GoogleService-Info.plist"
  lane :setup_google_services do
    # Check if GoogleService-Info.plist exists in root
    unless File.exist?("../GoogleService-Info.plist")
      UI.user_error!("‚ùå GoogleService-Info.plist not found in project root. Please add it first.")
    end
    
    # Copy to iOS directory if it exists
    if Dir.exist?("../ios/getmaximumfitiosapp")
      sh("cp ../GoogleService-Info.plist ../ios/getmaximumfitiosapp/")
      UI.success("‚úÖ Copied GoogleService-Info.plist to iOS directory")
    else
      UI.message("‚ÑπÔ∏è iOS directory not found - will be created during prebuild")
    end
  end

  desc "Generate screenshots for App Store"
  lane :screenshots do
    UI.message("üì∏ Generating screenshots for App Store...")
    
    # Change to iOS directory and run screenshots
    Dir.chdir("../ios") do
      # Use bundle exec if Gemfile exists
      if File.exist?("Gemfile")
        sh("bundle exec fastlane snapshot")
      else
        sh("fastlane snapshot")
      end
    end
    
    UI.success("‚úÖ Screenshots generated successfully!")
  end

  # Error handling
  error do |lane, exception|
    slack(
      message: "‚ùå Lane #{lane} failed with exception: #{exception}",
      success: false,
      slack_url: ENV["SLACK_WEBHOOK_URL"]
    ) if ENV["SLACK_WEBHOOK_URL"]
  end
end

# Helper function to download files
def download_url(url:, download_to:)
  sh("curl -L -o '#{download_to}' '#{url}'")
end
